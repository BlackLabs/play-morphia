h1. Lifecycle event model of PlayMorphia and Morphiap(note). The content of this chapter is only valid for PlayMorphia v1.2.4 or later.In this chapter we will explorer the lifecycle event model of PlayMorphia (start from v1.2.4) and Morphia.h2. <a name="create">Create events</a>!images/lifecycle-create!h3. <a name="create-play">PlayMorphia create events</a>|<_.event|<_.description||<on add|<triggered before an new entity is saved||<added|<triggered after an new entity is saved|*Event implementation*|<_.event|<_.annotation|<_.interface||<on add|<<code>@OnAdd</code>|@IMorphiaEventHandler.onAdd(Model)@||<added|<<code>@Added</code>|@IMorphiaEventHandler.added(Model)@|h3. <a name="create-morphia">Morphia create events</a>Morphia does not provide specific create events, however you could use @PrePersist@, @PreSave@ and @PostPerist@ to simulate create events and use @this.isNew()@ to identify if current model instance is an new entity or existing entity. See "Morphia update events":lifecycle-def#update-morphia for detail about @PrePersist@, @PreSave@ and @PostPerist@ events.h2. <a name="update">Update events</a>!images/lifecycle-update!h3. <a name="update-play">PlayMorphia update events</a>|<_.event|<_.description||<on update|<triggered before an existing entity is saved||<updated|<triggered after an existing entity is saved|*Event implementation*|<_.event|<_.annotation [1]|<_.interface [2]||<on update|<<code>@OnUpdate</code>|@IMorphiaEventHandler.onUpdate(Model)@||<updated|<<code>@Updated</code>|@IMorphiaEventHandler.updated(Model)@|fn1. see more about "annotation based PlayMorphia lifecycle event handling":lifecycle#selffn2. see more about "event handler based PlayMorphia lifecycle event handling":lifecycle#seph3. <a name="update-morphia">Morphia update events</a>|<_.event|<_annotation|<_.description||<pre persist|<<code>@PrePersist</code>|triggered *before* a PlayMorphia "model":model instance get converted into a MongoDB's <a href="http://api.mongodb.org/java/2.6/com/mongodb/DBObject.html">@DBObject@</a>||<pre save|<<code>@PreSave</code>|<triggered *after* a PlayMorphia "model":model instance get converted into a MongoDB's <a href="http://api.mongodb.org/java/2.6/com/mongodb/DBObject.html">@DBObject@</a> and *before* that @DBObject@ is saved into MongoDB||<post persist|<<code>@PostPersist</code>|<triggered *after* the model instance saved into MongoDB|p(note). Morphia annotation enable you do define methods that accept parameters and return result. Click "here":http://code.google.com/p/morphia/source/browse/trunk/morphia/src/test/java/com/google/code/morphia/TestDatastore.java#82 for examples.h2. <a name="load">Load events</a>!images/lifecycle-load!h3. <a name="load-play">PlayMorphia load events</a>|<_.event|<_.description||<on load|<triggered before an entity is loaded from MongoDB||<loaded|<triggered after an entity is loaded from MongoDB|p(note). @OnLoad@ event is seldom used as when this event triggered, the entity is still empty and waiting for the fields to be filled*Event implementation*|<_.event|<_.annotation|<_.interface||<on load|<<code>@OnLoad</code>|@IMorphiaEventHandler.onLoad(Model)@||<loaded|<<code>@Loaded</code>|@IMorphiaEventHandler.loaded(Model)@|h3. <a name="load-morphia">Morphia load events</a>|<_.event|<_annotation|<_.description||<pre load|<<code>@PreLoad</code>|triggered *before* a PlayMorphia "model":model instance get loaded from MongoDB||<post load|<<code>@PostLoad</code>|<triggered *after* the model instance loaded from MongoDB|h2. <a name="delete">Delete events</a>!images/lifecycle-delete!h3. <a name="delete-play">PlayMorphia delete events</a>|<_.event|<_.description||<on delete|<triggered before an entity is removed from MongoDB||<deleted|<triggered after an entity deleted from MongoDB|*Event implementation*|<_.event|<_.annotation|<_.interface||<on delete|<<code>@OnDelete</code>|@IMorphiaEventHandler.onDelete(Model)@||<deleted|<<code>@Deleted</code>|@IMorphiaEventHandler.deleted(Model)@|h3. <a name="delete-morphia">Morphia delete events</a>Morphia does not support delete eventsh2. <a name="batch-delete">Batch delete events</a>!images/lifecycle-batch-delete!h3. <a name="batch-delete-play">PlayMorphia batch delete events</a>|<_.event|<_.description||<on batch delete|<triggered before a set of entities defined by a PlayMorphia query removed from MongoDB||<batch deleted|<triggered after a set of entities defined by a PlayMorphia query deleted from MongoDB|*Event implementation*|<_.event|<_.annotation|<_.interface||<on batch delete|<<code>@OnBatchDelete</code>|@IMorphiaEventHandler.onBatchDelete(MorphiaQuery)@||<batch deleted|<<code>@BatchDeleted</code>|@IMorphiaEventHandler.batchDeleted(MorphaQuery)@|h3. <a name="batch-delete-morphia">Morphia batch delete events</a>Morphia does not support batch delete eventsh2. <a name="notes">Additional notes</a># For all events except batch delete, 